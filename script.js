let progress = 0;
let collected = {};
let currentAspect = null;

let loader = setInterval(() => {
  progress += 10;
  document.getElementById('progress').innerText = progress + '%';
  if (progress >= 100) {
    clearInterval(loader);
    showScreen('intro');
  }
}, 200);

function showScreen(id) {
  document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
  document.getElementById(id).classList.add('active');
  
  // –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–ª–∞–Ω–µ—Ç—ã
  if (id === 'map') {
    setTimeout(positionPlanets, 50);
  }
}

function typeText(elementId, text, speed = 40) {
  let i = 0;
  let el = document.getElementById(elementId);
  el.innerText = "";
  let interval;

  function finish() {
    clearInterval(interval);
    el.innerText = text;
    el.onclick = null;
  }

  interval = setInterval(() => {
    el.innerText += text.charAt(i);
    i++;
    if (i >= text.length) finish();
  }, speed);

  el.onclick = finish;
}

// –ú—É–∑—ã–∫–∞
const music = document.getElementById("bg-music");
const musicBtn = document.getElementById("music-toggle");
let musicPlaying = false;

musicBtn.onclick = () => {
  if (musicPlaying) {
    music.pause();
    musicBtn.textContent = "üîá";
  } else {
    music.play();
    musicBtn.textContent = "üîä";
  }
  musicPlaying = !musicPlaying;
};

function startJourney() {
  showScreen('dialog');
  typeText("dialog-text",
    "–Ø ‚Äî –•—Ä–∞–Ω–∏—Ç–µ–ª—å. –ü—è—Ç—å –ê—Å–ø–µ–∫—Ç–æ–≤ –∂–¥—É—Ç —Ç–µ–±—è. –õ–∏—à—å —Å–æ–±—Ä–∞–≤ –∏—Ö –≤–º–µ—Å—Ç–µ, —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–∂–µ—á—å –ò—Å—Ç–æ—á–Ω–∏–∫ –∏ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è—Ç—å –ö—Ä–∏—Ç–∏–∫—É."
  );
  if (!musicPlaying) {
    music.play().then(() => {
      musicBtn.textContent = "üîä";
      musicPlaying = true;
    }).catch(err => {
      console.log("–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:", err);
    });
  }
}

const aspects = {
  form: {title: '–ê—Å–ø–µ–∫—Ç –§–æ—Ä–º—ã',task: '–ö–∞–∫–∞—è —Ñ–∏–≥—É—Ä–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–π –≤ –≥–µ–æ–º–µ—Ç—Ä–∏–∏?',puzzle: `<input type="text" id="answer" placeholder="–¢–≤–æ–π –æ—Ç–≤–µ—Ç">`,answer: '–∫—Ä—É–≥'},
  sound: {title: '–ê—Å–ø–µ–∫—Ç –ó–≤—É–∫–∞',task: '–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ ‚Äî –Ω–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∂–∞–Ω—Ä?',puzzle: `<select id="answer"><option>–†–æ–∫</option><option>–î–∂–∞–∑</option><option>–ò–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º</option><option>–•–∏–ø-—Ö–æ–ø</option></select>`,answer: '–ò–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º'},
  narrative: {title: '–ê—Å–ø–µ–∫—Ç –ù–∞—Ä—Ä–∞—Ç–∏–≤–∞',task: '–ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∏—Å—Ç–æ—Ä–∏–∏?',puzzle: `<select id="answer"><option>–ì–µ—Ä–æ–π —Å–ø–∞—Å–∞–µ—Ç –º–∏—Ä</option><option>–ì–µ—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø—É—Ç—å</option><option>–ì–µ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –≤—Ä–∞–≥–∞</option></select>`,answer: '–ì–µ—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø—É—Ç—å'},
  vision: {title: '–ê—Å–ø–µ–∫—Ç –í–∏–¥–µ–Ω–∏—è',task: '–°–∫–æ–ª—å–∫–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –∑–¥–µ—Å—å? üî∫üî∫üî∫',puzzle: `<input type="number" id="answer" placeholder="–ß–∏—Å–ª–æ">`,answer: '3'},
  will: {title: '–ê—Å–ø–µ–∫—Ç –í–æ–ª–∏',task: '–ß—Ç–æ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞?',puzzle: `<select id="answer"><option>–ò–¥–µ—è</option><option>–í–æ–ª—è</option><option>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</option></select>`,answer: '–í–æ–ª—è'}
};

function enterAspect(aspect) {
  currentAspect = aspect;
  showScreen('aspect');
  document.getElementById('aspect-title').innerText = aspects[aspect].title;
  document.getElementById('aspect-task').innerText = aspects[aspect].task;
  document.getElementById('aspect-puzzle').innerHTML = aspects[aspect].puzzle;
  document.getElementById('aspect-error').style.display = 'none';

  document.getElementById('aspect-submit').onclick = () => {
    let val = document.getElementById('answer').value.trim();
    if (val.toLowerCase() === aspects[aspect].answer.toLowerCase()) {
      completeAspect();
    } else {
      showError('–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!');
    }
  };
}

function showError(msg) {
  let err = document.getElementById('aspect-error');
  err.innerText = msg;
  err.style.display = 'block';
  setTimeout(() => {
    err.style.display = 'none';
  }, 2000);
}

function completeAspect() {
  collected[currentAspect] = true;
  document.getElementById(currentAspect).classList.add('completed');
  showScreen('map');
  if (Object.keys(collected).length === 5) {showScreen('final');}
}

function ending(choice) {
  showScreen('ending');
  if (choice === 'chaos') {
    document.getElementById('ending-title').innerText = '–¢—ã –≤—ã–±—Ä–∞–ª –•–∞–æ—Å';
    document.getElementById('ending-text').innerText = '–ú–∏—Ä —Ä–∞—Å–ø–∞–ª—Å—è. –¢—ã —Å—Ç–∞–ª –ü—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º —Ö–∞–æ—Å–∞. (üåë)';
  } else {
    document.getElementById('ending-title').innerText = '–¢—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª –ï–¥–∏–Ω—Å—Ç–≤–æ';
    document.getElementById('ending-text').innerText = '–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–æ—Å—Å–∏—è–ª –≤–Ω–æ–≤—å. –¢—ã —Å—Ç–∞–ª –•—Ä–∞–Ω–∏—Ç–µ–ª–µ–º —Ü–µ–ª–æ–≥–æ. (‚ú®)';
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç
function positionPlanets() {
  const map = document.querySelector(".map");
  const planets = map.querySelectorAll(".aspect-btn");
  const center = map.querySelector(".center");

  const mapWidth = map.offsetWidth;
  const mapHeight = map.offsetHeight;
  
  // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ
  center.style.left = (mapWidth - center.offsetWidth) / 2 + "px";
  center.style.top = (mapHeight - center.offsetHeight) / 2 + "px";

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞ (–æ—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤)
  const padding = 40;
  const safeWidth = mapWidth - padding * 2;
  const safeHeight = mapHeight - padding * 2;

  // –≠–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
  const numPlanets = planets.length;
  const centerX = mapWidth / 2;
  const centerY = mapHeight / 2;

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞
  const maxRadiusX = safeWidth / 2 - Math.max(...Array.from(planets).map(p => p.offsetWidth));
  const maxRadiusY = safeHeight / 2 - Math.max(...Array.from(planets).map(p => p.offsetHeight));
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–ª–ª–∏–ø—Å –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
  planets.forEach((planet, i) => {
    const angle = (2 * Math.PI / numPlanets) * i;
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–æ–≤
    const radiusRatio = 0.7 + (0.3 * (i / numPlanets)); // –û—Ç 70% –¥–æ 100%
    const radiusX = maxRadiusX * radiusRatio;
    const radiusY = maxRadiusY * radiusRatio;

    const x = Math.cos(angle) * radiusX + centerX - planet.offsetWidth / 2;
    const y = Math.sin(angle) * radiusY + centerY - planet.offsetHeight / 2;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
    const finalX = Math.max(padding, Math.min(x, mapWidth - planet.offsetWidth - padding));
    const finalY = Math.max(padding, Math.min(y, mapHeight - planet.offsetHeight - padding));

    planet.style.left = finalX + "px";
    planet.style.top = finalY + "px";
  });

  drawLinks();
}

function drawLinks() {
  const canvas = document.getElementById("links");
  const ctx = canvas.getContext("2d");
  const map = document.querySelector(".map");
  canvas.width = map.offsetWidth;
  canvas.height = map.offsetHeight;

  const center = map.querySelector(".center");
  const centerRect = center.getBoundingClientRect();
  const mapRect = map.getBoundingClientRect();
  const cx = centerRect.left - mapRect.left + center.offsetWidth/2;
  const cy = centerRect.top - mapRect.top + center.offsetHeight/2;

  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.strokeStyle = "rgba(0, 200, 255, 0.7)";
  ctx.lineWidth = 2;
  ctx.shadowBlur = 15;
  ctx.shadowColor = "cyan";

  document.querySelectorAll(".aspect-btn").forEach(p => {
    const r = p.getBoundingClientRect();
    const x = r.left - mapRect.left + p.offsetWidth/2;
    const y = r.top - mapRect.top + p.offsetHeight/2;
    ctx.beginPath();
    ctx.moveTo(cx, cy);
    ctx.lineTo(x, y);
    ctx.stroke();
  });
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
let resizeTimer;
window.addEventListener("resize", () => {
  clearTimeout(resizeTimer);
  resizeTimer = setTimeout(positionPlanets, 250);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
window.addEventListener("load", () => {
  positionPlanets();
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
  setTimeout(positionPlanets, 100);
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è VK Mini Apps
document.addEventListener('DOMContentLoaded', function() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  
  if (isMobile) {
    document.body.classList.add('mobile');
  } else {
    document.body.classList.add('desktop');
  }
  
  // –ü–µ—Ä–µ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
  window.addEventListener('orientationchange', function() {
    setTimeout(positionPlanets, 300);
  });
});