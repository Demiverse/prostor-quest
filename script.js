let progress = 0;
let collected = {};
let currentAspect = null;

let loader = setInterval(() => {
  progress += 10;
  document.getElementById('progress').innerText = progress + '%';
  if (progress >= 100) {
    clearInterval(loader);
    showScreen('intro');
  }
}, 200);

function showScreen(id) {
  document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
  document.getElementById(id).classList.add('active');
}

function typeText(elementId, text, speed = 40) {
  let i = 0;
  let el = document.getElementById(elementId);
  el.innerText = "";
  let interval;

  function finish() {
    clearInterval(interval);
    el.innerText = text;
    el.onclick = null;
  }

  interval = setInterval(() => {
    el.innerText += text.charAt(i);
    i++;
    if (i >= text.length) finish();
  }, speed);

  el.onclick = finish;
}

// –ú—É–∑—ã–∫–∞
const music = document.getElementById("bg-music");
const musicBtn = document.getElementById("music-toggle");
let musicPlaying = true; // —Å—Ä–∞–∑—É true

window.addEventListener("load", () => {
  music.play();
  musicBtn.textContent = "üîä";
});

musicBtn.onclick = () => {
  if (musicPlaying) {
    music.pause();
    musicBtn.textContent = "üîá";
  } else {
    music.play();
    musicBtn.textContent = "üîä";
  }
  musicPlaying = !musicPlaying;
};

function startJourney() {
  showScreen('dialog');
  typeText("dialog-text",
    "–Ø ‚Äî –•—Ä–∞–Ω–∏—Ç–µ–ª—å. –ü—è—Ç—å –ê—Å–ø–µ–∫—Ç–æ–≤ –∂–¥—É—Ç —Ç–µ–±—è. –õ–∏—à—å —Å–æ–±—Ä–∞–≤ –∏—Ö –≤–º–µ—Å—Ç–µ, —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–∂–µ—á—å –ò—Å—Ç–æ—á–Ω–∏–∫ –∏ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è—Ç—å –ö—Ä–∏—Ç–∏–∫—É."
  );
  if (!musicPlaying) {
    music.play();
    musicBtn.textContent = "üîä";
    musicPlaying = true;
  }
}

const aspects = {
  form: {title: '–ê—Å–ø–µ–∫—Ç –§–æ—Ä–º—ã',task: '–ö–∞–∫–∞—è —Ñ–∏–≥—É—Ä–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–π –≤ –≥–µ–æ–º–µ—Ç—Ä–∏–∏?',puzzle: `<input type="text" id="answer" placeholder="–¢–≤–æ–π –æ—Ç–≤–µ—Ç">`,answer: '–∫—Ä—É–≥'},
  sound: {title: '–ê—Å–ø–µ–∫—Ç –ó–≤—É–∫–∞',task: '–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ ‚Äî –Ω–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∂–∞–Ω—Ä?',puzzle: `<select id="answer"><option>–†–æ–∫</option><option>–î–∂–∞–∑</option><option>–ò–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º</option><option>–•–∏–ø-—Ö–æ–ø</option></select>`,answer: '–ò–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º'},
  narrative: {title: '–ê—Å–ø–µ–∫—Ç –ù–∞—Ä—Ä–∞—Ç–∏–≤–∞',task: '–ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∏—Å—Ç–æ—Ä–∏–∏?',puzzle: `<select id="answer"><option>–ì–µ—Ä–æ–π —Å–ø–∞—Å–∞–µ—Ç –º–∏—Ä</option><option>–ì–µ—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø—É—Ç—å</option><option>–ì–µ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –≤—Ä–∞–≥–∞</option></select>`,answer: '–ì–µ—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø—É—Ç—å'},
  vision: {title: '–ê—Å–ø–µ–∫—Ç –í–∏–¥–µ–Ω–∏—è',task: '–°–∫–æ–ª—å–∫–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –∑–¥–µ—Å—å? üî∫üî∫üî∫',puzzle: `<input type="number" id="answer" placeholder="–ß–∏—Å–ª–æ">`,answer: '3'},
  will: {title: '–ê—Å–ø–µ–∫—Ç –í–æ–ª–∏',task: '–ß—Ç–æ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞?',puzzle: `<select id="answer"><option>–ò–¥–µ—è</option><option>–í–æ–ª—è</option><option>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</option></select>`,answer: '–í–æ–ª—è'}
};

function enterAspect(aspect) {
  currentAspect = aspect;
  showScreen('aspect');
  document.getElementById('aspect-title').innerText = aspects[aspect].title;
  document.getElementById('aspect-task').innerText = aspects[aspect].task;
  document.getElementById('aspect-puzzle').innerHTML = aspects[aspect].puzzle;
  document.getElementById('aspect-error').style.display = 'none';

  document.getElementById('aspect-submit').onclick = () => {
    let val = document.getElementById('answer').value.trim();
    if (val.toLowerCase() === aspects[aspect].answer.toLowerCase()) {
      completeAspect();
    } else {
      showError('–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!');
    }
  };
}

function showError(msg) {
  let err = document.getElementById('aspect-error');
  err.innerText = msg;
  err.style.display = 'block';
  setTimeout(() => {
    err.style.display = 'none';
  }, 2000);
}

function completeAspect() {
  collected[currentAspect] = true;
  document.getElementById(currentAspect).classList.add('completed');
  showScreen('map');
  if (Object.keys(collected).length === 5) {showScreen('final');}
}

function ending(choice) {
  showScreen('ending');
  if (choice === 'chaos') {
    document.getElementById('ending-title').innerText = '–¢—ã –≤—ã–±—Ä–∞–ª –•–∞–æ—Å';
    document.getElementById('ending-text').innerText = '–ú–∏—Ä —Ä–∞—Å–ø–∞–ª—Å—è. –¢—ã —Å—Ç–∞–ª –ü—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º —Ö–∞–æ—Å–∞. (üåë)';
  } else {
    document.getElementById('ending-title').innerText = '–¢—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª –ï–¥–∏–Ω—Å—Ç–≤–æ';
    document.getElementById('ending-text').innerText = '–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–æ—Å—Å–∏—è–ª –≤–Ω–æ–≤—å. –¢—ã —Å—Ç–∞–ª –•—Ä–∞–Ω–∏—Ç–µ–ª–µ–º —Ü–µ–ª–æ–≥–æ. (‚ú®)';
  }
}

// –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –ø–æ –∫—Ä—É–≥—É (—Å –ª—ë–≥–∫–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é)
function positionPlanets() {
  const map = document.querySelector(".map");
  const planets = map.querySelectorAll(".aspect-btn");
  const radius = map.offsetWidth / 2 - 80;

  planets.forEach((planet, i) => {
    let angle = (Math.PI * 2 / planets.length) * i + (Math.random() * 0.5);
    let x = Math.cos(angle) * radius + map.offsetWidth/2 - planet.offsetWidth/2;
    let y = Math.sin(angle) * radius + map.offsetHeight/2 - planet.offsetHeight/2;
    planet.style.left = x + "px";
    planet.style.top = y + "px";
  });
  drawLinks();
}

function drawLinks() {
  const canvas = document.getElementById("links");
  const ctx = canvas.getContext("2d");
  const map = document.querySelector(".map");
  canvas.width = map.offsetWidth;
  canvas.height = map.offsetHeight;

  const center = map.querySelector(".center");
  const centerRect = center.getBoundingClientRect();
  const mapRect = map.getBoundingClientRect();
  const cx = centerRect.left - mapRect.left + center.offsetWidth/2;
  const cy = centerRect.top - mapRect.top + center.offsetHeight/2;

  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.strokeStyle = "rgba(0, 200, 255, 0.7)";
  ctx.lineWidth = 2;
  ctx.shadowBlur = 15;
  ctx.shadowColor = "cyan";

  document.querySelectorAll(".aspect-btn").forEach(p => {
    const r = p.getBoundingClientRect();
    const x = r.left - mapRect.left + p.offsetWidth/2;
    const y = r.top - mapRect.top + p.offsetHeight/2;
    ctx.beginPath();
    ctx.moveTo(cx, cy);
    ctx.lineTo(x, y);
    ctx.stroke();
  });
}

window.addEventListener("load", positionPlanets);
window.addEventListener("resize", positionPlanets);
