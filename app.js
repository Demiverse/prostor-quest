// app.js
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let gameState = {
    currentScreen: 'loading',
    storyIndex: 0,
    completedPuzzles: [],
    startTime: null,
    playerName: '–°—Ç–∞–∂–µ—Ä',
    soundEnabled: false,
    platform: 'web',
    isVKApp: false,
    vkBridgeInitialized: false
};

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function initGame() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
    
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK Bridge –¥–ª—è Mini Apps
    try {
        if (typeof vkBridge !== 'undefined') {
            await vkBridge.send('VKWebAppInit');
            gameState.vkBridgeInitialized = true;
            gameState.isVKApp = true;
            console.log('VK Bridge –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            try {
                const userInfo = await vkBridge.send('VKWebAppGetUserInfo');
                gameState.playerName = userInfo.first_name;
            } catch (e) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK Bridge:', error);
    }
    
    // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    detectPlatform();
    
    // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    simulateLoading();
}

function detectPlatform() {
    if (gameState.isVKApp) {
        gameState.platform = 'vk_app';
        document.getElementById('platform-badge').textContent = 'VK Mini App';
    } else {
        gameState.platform = 'web';
        document.getElementById('platform-badge').textContent = '–ë—Ä–∞—É–∑–µ—Ä';
    }
}

function simulateLoading() {
    const progressBar = document.querySelector('.loading-progress');
    let progress = 0;
    
    const loadingInterval = setInterval(() => {
        progress += 2;
        progressBar.style.width = progress + '%';
        
        if (progress >= 100) {
            clearInterval(loadingInterval);
            setTimeout(() => {
                gameState.startTime = Date.now();
                showScreen('game');
                loadStory(0);
            }, 500);
        }
    }, 50);
}

function showScreen(screenName) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    const screen = document.getElementById('screen-' + screenName);
    if (screen) {
        screen.classList.add('active');
        gameState.currentScreen = screenName;
    }
}

function loadStory(index) {
    // –í–ê–ñ–ù–û: –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏!
    if (index >= gameData.story.length) {
        // –¢–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        checkForVictory();
        return;
    }
    
    const storyStep = gameData.story[index];
    gameState.storyIndex = index;
    
    updateStoryUI(storyStep);
    
    if (storyStep.puzzle) {
        setTimeout(() => {
            startPuzzle(storyStep.puzzle);
        }, 1000);
    }
}

function updateStoryUI(storyStep) {
    const character = gameData.characters[storyStep.character];
    const characterImage = document.getElementById('character-image');
    const characterName = document.getElementById('character-name');
    const dialogText = document.getElementById('dialog-text');
    const choicesContainer = document.getElementById('choices-container');
    
    if (characterImage && character.emoji) {
        characterImage.querySelector('.character-emoji').textContent = character.emoji;
    }
    
    if (characterName) {
        characterName.textContent = character.name;
    }
    
    if (dialogText) {
        dialogText.textContent = storyStep.text;
    }
    
    if (choicesContainer) {
        choicesContainer.innerHTML = '';
        
        if (storyStep.choices && storyStep.choices.length > 0) {
            storyStep.choices.forEach(choice => {
                const button = document.createElement('button');
                button.className = 'choice-btn';
                button.textContent = choice.text;
                
                const isPuzzleCompleted = choice.puzzle ? 
                    gameState.completedPuzzles.includes(choice.puzzle) : false;
                
                if (isPuzzleCompleted) {
                    button.disabled = true;
                    button.style.opacity = '0.5';
                    button.textContent += ' ‚úì';
                } else {
                    button.onclick = () => handleChoice(choice);
                }
                
                choicesContainer.appendChild(button);
            });
        } else {
            const button = document.createElement('button');
            button.className = 'choice-btn';
            button.textContent = '–î–∞–ª–µ–µ ‚Üí';
            button.onclick = () => loadStory(gameState.storyIndex + 1);
            choicesContainer.appendChild(button);
        }
    }
}

function handleChoice(choice) {
    if (choice.puzzle) {
        startPuzzle(choice.puzzle);
    } else if (choice.next) {
        const nextIndex = gameData.story.findIndex(step => step.id === choice.next);
        if (nextIndex !== -1) {
            loadStory(nextIndex);
        }
    } else {
        loadStory(gameState.storyIndex + 1);
    }
}

function startPuzzle(puzzleType) {
    const puzzle = gameData.puzzles[puzzleType];
    if (!puzzle) return;
    
    document.getElementById('puzzle-title').textContent = puzzle.title;
    document.getElementById('puzzle-description').textContent = puzzle.description;
    
    const puzzleBody = document.getElementById('puzzle-body');
    if (puzzleBody) {
        puzzleBody.innerHTML = puzzle.content;
        
        if (puzzle.init && typeof puzzle.init === 'function') {
            puzzle.init();
        }
    }
    
    showScreen('puzzle');
}

function checkPuzzle() {
    const currentStory = gameData.story[gameState.storyIndex];
    if (!currentStory || !currentStory.puzzle) return;
    
    const puzzleType = currentStory.puzzle;
    const puzzle = gameData.puzzles[puzzleType];
    
    if (puzzle && typeof puzzle.check === 'function') {
        if (puzzle.check()) {
            puzzleSuccess(puzzleType);
        } else {
            alert('–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!');
        }
    }
}

function puzzleSuccess(puzzleType) {
    if (!gameState.completedPuzzles.includes(puzzleType)) {
        gameState.completedPuzzles.push(puzzleType);
    }
    
    updateProgress();
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏
    const nextIndex = gameState.storyIndex + 1;
    if (nextIndex < gameData.story.length) {
        loadStory(nextIndex);
    } else {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∏—Å—Ç–æ—Ä–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        checkForVictory();
    }
}

function updateProgress() {
    const totalPuzzles = Object.keys(gameData.puzzles).length;
    const completed = gameState.completedPuzzles.length;
    const percent = Math.round((completed / totalPuzzles) * 100);
    
    const progressFill = document.getElementById('progress-fill');
    const progressPercent = document.getElementById('progress-percent');
    
    if (progressFill) progressFill.style.width = percent + '%';
    if (progressPercent) progressPercent.textContent = percent;
}

function checkForVictory() {
    const totalPuzzles = Object.keys(gameData.puzzles).length;
    const completed = gameState.completedPuzzles.length;
    
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã: ${completed}/${totalPuzzles}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–±–µ–¥—É –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø—Ä–æ–π–¥–µ–Ω—ã –í–°–ï –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏
    if (completed >= totalPuzzles && totalPuzzles > 0) {
        console.log('–í—Å–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–±–µ–¥—É!');
        showVictory();
    } else {
        console.log('–ï—â–µ –Ω–µ –≤—Å–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É');
        // –ï—Å–ª–∏ –Ω–µ –≤—Å–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–≥—Ä–µ
        showScreen('game');
    }
}

function showVictory() {
    const timeSpent = Date.now() - gameState.startTime;
    const minutes = Math.floor(timeSpent / 60000);
    const seconds = Math.floor((timeSpent % 60000) / 1000);
    
    const timeElement = document.getElementById('completion-time');
    const puzzlesElement = document.getElementById('puzzles-completed');
    
    if (timeElement) {
        timeElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    
    if (puzzlesElement) {
        puzzlesElement.textContent = `${gameState.completedPuzzles.length}/${Object.keys(gameData.puzzles).length}`;
    }
    
    showScreen('victory');
}

function showHint() {
    alert('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –†–∞—Å—Å—Ç–∞–≤—å —Ü–≤–µ—Ç–∞ –≤ –ø–æ—Ä—è–¥–∫–µ —Ä–∞–¥—É–≥–∏!');
}

async function shareResult() {
    if (gameState.vkBridgeInitialized) {
        try {
            await vkBridge.send('VKWebAppShare', {
                link: 'https://vk.com/apps?act=manage',
                title: '–Ø –ø—Ä–æ—à–µ–ª –∫–≤–µ—Å—Ç "–ü—Ä–æ—Å—Ç–æ—Ä: –ö–æ–¥ –ï–¥–∏–Ω—Å—Ç–≤–∞"!',
                text: `–Ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –µ–¥–∏–Ω—Å—Ç–≤–æ –ü—Ä–æ—Å—Ç–æ—Ä–∞ –∑–∞ ${document.getElementById('completion-time').textContent}! üéâ`
            });
        } catch (error) {
            alert('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: –Ø –ø—Ä–æ—à–µ–ª –∫–≤–µ—Å—Ç "–ü—Ä–æ—Å—Ç–æ—Ä: –ö–æ–¥ –ï–¥–∏–Ω—Å—Ç–≤–∞"!');
        }
    } else {
        alert('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: –Ø –ø—Ä–æ—à–µ–ª –∫–≤–µ—Å—Ç "–ü—Ä–æ—Å—Ç–æ—Ä: –ö–æ–¥ –ï–¥–∏–Ω—Å—Ç–≤–∞"!');
    }
}

function restartGame() {
    gameState.storyIndex = 0;
    gameState.completedPuzzles = [];
    gameState.startTime = Date.now();
    
    showScreen('game');
    loadStory(0);
    updateProgress();
}

function toggleMenu() {
    const menu = document.getElementById('side-menu');
    menu.classList.toggle('active');
}

function toggleSound() {
    gameState.soundEnabled = !gameState.soundEnabled;
    const soundBtn = document.querySelector('.sound-btn');
    const soundIcon = document.getElementById('sound-icon');
    
    if (soundBtn) {
        soundBtn.textContent = gameState.soundEnabled ? 'üîä' : 'üîá';
    }
    if (soundIcon) {
        soundIcon.textContent = gameState.soundEnabled ? 'üîä' : 'üîá';
    }
}

function backToGame() {
    showScreen('game');
}

function showHelp() {
    alert('üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n\n‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π\n‚Ä¢ –†–µ—à–∞–π—Ç–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ —á—Ç–æ–±—ã –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å—Å—è\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
}

// –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
const gameData = {
    characters: {
        system: { name: '–°–ò–°–¢–ï–ú–ê', emoji: '‚ö°' },
        mentor: { name: '–ù–ê–°–¢–ê–í–ù–ò–ö', emoji: 'üë®‚Äçüíº' },
        design: { name: '–ê–°–ü–ï–ö–¢ –î–ò–ó–ê–ô–ù–ê', emoji: 'üé®' },
        music: { name: '–ê–°–ü–ï–ö–¢ –ú–£–ó–´–ö–ò', emoji: 'üéµ' },
        show: { name: '–ê–°–ü–ï–ö–¢ –®–û–£', emoji: 'üé≠' }
    },

    story: [
        {
            character: 'system',
            text: '–¢–†–ï–í–û–ì–ê! –¢–≤–æ—Ä—á–µ—Å–∫–æ–µ —è–¥—Ä–æ "–ü—Ä–æ—Å—Ç–æ—Ä–∞" –∞—Ç–∞–∫–æ–≤–∞–Ω–æ –≤–∏—Ä—É—Å–æ–º "–ö—Ä–∏—Ç–∏–∫–æ–º".',
            choices: []
        },
        {
            character: 'system',
            text: '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–æ–±—â–µ–Ω–∞. –ê—Å–ø–µ–∫—Ç—ã —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞.',
            choices: []
        },
        {
            character: 'mentor',
            text: '–°—Ç–∞–∂–µ—Ä, —Ç—ã –Ω–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å. "–ö—Ä–∏—Ç–∏–∫" —É–±–µ–¥–∏–ª –∫–∞–∂–¥—ã–π –ê—Å–ø–µ–∫—Ç, —á—Ç–æ –æ–Ω —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω.',
            choices: []
        },
        {
            character: 'mentor',
            text: '–¢–µ–±–µ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑–∏ –º–µ–∂–¥—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏. –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–Ω–µ–º:',
            choices: [
                { text: '–î–∏–∑–∞–π–Ω üé®', puzzle: 'design' },
                { text: '–ú—É–∑—ã–∫–∞ üéµ', puzzle: 'music' },
                { text: '–®–æ—É üé≠', puzzle: 'show' }
            ]
        },
        {
            character: 'design',
            text: '–û—Ç–ª–∏—á–Ω–æ! –Ø, –ê—Å–ø–µ–∫—Ç –î–∏–∑–∞–π–Ω–∞, –∂–¥—É —Ç–≤–æ–µ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è!',
            puzzle: 'design',
            choices: []
        },
        {
            character: 'design',
            text: '–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –¢—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –≥–∞—Ä–º–æ–Ω–∏—é —Ü–≤–µ—Ç–∞. –Ø —Å–Ω–æ–≤–∞ —Å –≤–∞–º–∏!',
            choices: [
                { text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É', next: 'back_to_choice' }
            ]
        },
        {
            id: 'back_to_choice',
            character: 'mentor',
            text: '–û—Ç–ª–∏—á–Ω–æ! –û–¥–∏–Ω –ê—Å–ø–µ–∫—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π:',
            choices: [
                { text: '–ú—É–∑—ã–∫–∞ üéµ', puzzle: 'music' },
                { text: '–®–æ—É üé≠', puzzle: 'show' }
            ]
        },
        {
            character: 'music',
            text: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø, –ê—Å–ø–µ–∫—Ç –ú—É–∑—ã–∫–∏, –≥–æ—Ç–æ–≤ –∫ —Ç–≤–æ–µ–º—É –∏—Å–ø—ã—Ç–∞–Ω–∏—é!',
            puzzle: 'music',
            choices: []
        },
        {
            character: 'music',
            text: '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –¢—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –≥–∞—Ä–º–æ–Ω–∏—é –∑–≤—É–∫–∞. –Ø –≤ —Å—Ç—Ä–æ—é!',
            choices: [
                { text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É', next: 'back_to_choice_2' }
            ]
        },
        {
            id: 'back_to_choice_2',
            character: 'mentor',
            text: '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –ê—Å–ø–µ–∫—Ç. –í–ø–µ—Ä–µ–¥!',
            choices: [
                { text: '–®–æ—É üé≠', puzzle: 'show' }
            ]
        },
        {
            character: 'show',
            text: '–ò –≤–æ—Ç –º—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å! –Ø, –ê—Å–ø–µ–∫—Ç –®–æ—É, –∂–¥—É —Ç–≤–æ–µ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è!',
            puzzle: 'show',
            choices: []
        },
        {
            character: 'show',
            text: '–ë—Ä–∞–≤–æ! –¢—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –∏—Å–∫—É—Å—Å—Ç–≤–æ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è. –Ø —Å–Ω–æ–≤–∞ —Å –≤–∞–º–∏!',
            choices: [
                { text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∏—Å—Å–∏—é', next: 'final' }
            ]
        },
        {
            id: 'final',
            character: 'mentor',
            text: '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –¢—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞. "–ü—Ä–æ—Å—Ç–æ—Ä" —Å–ø–∞—Å–µ–Ω!',
            choices: []
        }
    ],

    puzzles: {
        design: {
            title: '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –î–∏–∑–∞–π–Ω–∞',
            description: '–†–∞—Å—Å—Ç–∞–≤—å —Ü–≤–µ—Ç–∞ –≤ –ø–æ—Ä—è–¥–∫–µ —Ä–∞–¥—É–≥–∏',
            content: `
                <div style="text-align: center; padding: 20px;">
                    <h3>üé® –†–∞—Å—Å—Ç–∞–≤—å —Ü–≤–µ—Ç–∞ —Ä–∞–¥—É–≥–∏</h3>
                    <p>–ü–µ—Ä–µ—Ç–∞—â–∏ —Ü–≤–µ—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ</p>
                    <div id="color-puzzle" style="display: flex; gap: 10px; justify-content: center; margin: 20px 0; flex-wrap: wrap;">
                        <div draggable="true" data-color="red" style="padding: 15px; background: #ff6b6b; border-radius: 10px; cursor: grab;">üî¥ –ö—Ä–∞—Å–Ω—ã–π</div>
                        <div draggable="true" data-color="orange" style="padding: 15px; background: #ffa502; border-radius: 10px; cursor: grab;">üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π</div>
                        <div draggable="true" data-color="yellow" style="padding: 15px; background: #ffd700; border-radius: 10px; cursor: grab;">üü° –ñ–µ–ª—Ç—ã–π</div>
                        <div draggable="true" data-color="green" style="padding: 15px; background: #2ed573; border-radius: 10px; cursor: grab;">üü¢ –ó–µ–ª–µ–Ω—ã–π</div>
                        <div draggable="true" data-color="blue" style="padding: 15px; background: #1e90ff; border-radius: 10px; cursor: grab;">üîµ –°–∏–Ω–∏–π</div>
                    </div>
                    <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: –ö—Ä–∞—Å–Ω—ã–π, –û—Ä–∞–Ω–∂–µ–≤—ã–π, –ñ–µ–ª—Ç—ã–π, –ó–µ–ª–µ–Ω—ã–π, –°–∏–Ω–∏–π</p>
                </div>
            `,
            init: function() {
                const puzzleContainer = document.getElementById('color-puzzle');
                let draggedItem = null;
                
                puzzleContainer.querySelectorAll('[draggable="true"]').forEach(item => {
                    item.addEventListener('dragstart', function(e) {
                        draggedItem = this;
                        setTimeout(() => this.style.opacity = '0.5', 0);
                    });
                    
                    item.addEventListener('dragend', function() {
                        this.style.opacity = '1';
                        draggedItem = null;
                    });
                    
                    item.addEventListener('dragover', function(e) {
                        e.preventDefault();
                    });
                    
                    item.addEventListener('drop', function(e) {
                        e.preventDefault();
                        if (draggedItem && draggedItem !== this) {
                            const allItems = Array.from(puzzleContainer.children);
                            const thisIndex = allItems.indexOf(this);
                            const draggedIndex = allItems.indexOf(draggedItem);
                            
                            if (draggedIndex > thisIndex) {
                                puzzleContainer.insertBefore(draggedItem, this);
                            } else {
                                puzzleContainer.insertBefore(draggedItem, this.nextSibling);
                            }
                        }
                    });
                });
            },
            check: function() {
                const colors = Array.from(document.querySelectorAll('#color-puzzle > div'))
                    .map(item => item.getAttribute('data-color'));
                
                const correctOrder = ['red', 'orange', 'yellow', 'green', 'blue'];
                return JSON.stringify(colors) === JSON.stringify(correctOrder);
            }
        },
        music: {
            title: '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –ú—É–∑—ã–∫–∏',
            description: '–ü–æ—Å–ª—É—à–∞–π –∏ –ø–æ–≤—Ç–æ—Ä–∏ –º–µ–ª–æ–¥–∏—é',
            content: `
                <div style="text-align: center; padding: 20px;">
                    <h3>üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ</h3>
                    <p>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</p>
                    <div style="display: flex; gap: 10px; justify-content: center; margin: 20px 0; flex-wrap: wrap;">
                        <button class="music-btn" data-note="1" style="padding: 15px; background: #ff6b6b; border-radius: 10px; border: none; color: white;">üéµ 1</button>
                        <button class="music-btn" data-note="2" style="padding: 15px; background: #ffa502; border-radius: 10px; border: none; color: white;">üéµ 2</button>
                        <button class="music-btn" data-note="3" style="padding: 15px; background: #ffd700; border-radius: 10px; border: none; color: white;">üéµ 3</button>
                    </div>
                    <p>–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1, 2, 3</p>
                </div>
            `,
            init: function() {
                let sequence = [];
                const correctSequence = ['1', '2', '3'];
                
                document.querySelectorAll('.music-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const note = this.getAttribute('data-note');
                        sequence.push(note);
                        
                        if (sequence.length === correctSequence.length) {
                            if (JSON.stringify(sequence) === JSON.stringify(correctSequence)) {
                                alert('–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–µ–ª–æ–¥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
                                // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–∞–ª—å—à–µ
                                checkPuzzle();
                            } else {
                                alert('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
                                sequence = [];
                            }
                        }
                    });
                });
            },
            check: function() {
                // –í—Å–µ–≥–¥–∞ true, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ init
                return true;
            }
        },
        show: {
            title: '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –®–æ—É',
            description: '–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π',
            content: `
                <div style="text-align: center; padding: 20px;">
                    <h3>üé≠ –ò—Å–ø—ã—Ç–∞–Ω–∏–µ –®–æ—É</h3>
                    <p>–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ–±—ã—Ç–∏–π</p>
                    <div style="display: flex; flex-direction: column; gap: 10px; margin: 20px 0;">
                        <button class="scenario-btn" data-correct="false" style="padding: 15px; background: rgba(255, 255, 255, 0.1); border-radius: 10px; border: none; color: white; text-align: left;">–ì–µ—Ä–æ–π —Å–¥–∞–µ—Ç—Å—è –∏ —É—Ö–æ–¥–∏—Ç</button>
                        <button class="scenario-btn" data-correct="true" style="padding: 15px; background: rgba(255, 255, 255, 0.1); border-radius: 10px; border: none; color: white; text-align: left;">–ì–µ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ—à–µ–Ω–∏–µ –∏ –ø–æ–±–µ–∂–¥–∞–µ—Ç</button>
                        <button class="scenario-btn" data-correct="false" style="padding: 15px; background: rgba(255, 255, 255, 0.1); border-radius: 10px; border: none; color: white; text-align: left;">–ì–µ—Ä–æ–π –∑–ª–∏—Ç—Å—è –∏ –≤—Å–µ –ª–æ–º–∞–µ—Ç</button>
                    </div>
                </div>
            `,
            init: function() {
                document.querySelectorAll('.scenario-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const isCorrect = this.getAttribute('data-correct') === 'true';
                        if (isCorrect) {
                            alert('–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°—Ü–µ–Ω–∞—Ä–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
                            // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–∞–ª—å—à–µ
                            checkPuzzle();
                        } else {
                            alert('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
                        }
                    });
                });
            },
            check: function() {
                // –í—Å–µ–≥–¥–∞ true, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ init
                return true;
            }
        }
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É...');
    initGame();
});

// –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('close-menu')) {
        toggleMenu();
    }
});