// app.js (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Å—é–∂–µ—Ç–æ–º)

// -------------------
// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
// -------------------
let gameState = {
    currentScreen: 'loading',
    storyIndex: 0,
    completedPuzzles: [],
    startTime: null,
    playerName: '–°—Ç–∞–∂–µ—Ä',
    soundEnabled: false,
    platform: 'web',
    isVKApp: false,
    activePuzzle: null
};

// -------------------
// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// -------------------
async function initGame() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
    try {
        if (typeof vkBridge !== 'undefined' && vkBridge) {
            await vkBridge.send('VKWebAppInit');
            gameState.isVKApp = true;
            console.log('VK Bridge –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            try {
                const userInfo = await vkBridge.send('VKWebAppGetUserInfo');
                if (userInfo && userInfo.first_name) gameState.playerName = userInfo.first_name;
            } catch (e) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (VK):', e);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK Bridge:', error);
    }

    detectPlatform();
    simulateLoading();
}

function detectPlatform() {
    const badge = document.getElementById('platform-badge');
    if (gameState.isVKApp) {
        gameState.platform = 'vk_app';
        if (badge) badge.textContent = 'VK Mini App';
    } else {
        gameState.platform = 'web';
        if (badge) badge.textContent = '–ë—Ä–∞—É–∑–µ—Ä';
    }
}

function simulateLoading() {
    const progressBar = document.querySelector('.loading-progress');
    let progress = 0;

    const loadingInterval = setInterval(() => {
        progress += 2;
        if (progressBar) progressBar.style.width = Math.min(progress, 100) + '%';

        if (progress >= 100) {
            clearInterval(loadingInterval);
            setTimeout(() => {
                gameState.startTime = Date.now();
                showScreen('game');
                loadStory(0);
            }, 500);
        }
    }, 50);
}

function showScreen(screenName) {
    console.log("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω:", screenName);
    document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
    const screen = document.getElementById('screen-' + screenName);
    if (screen) {
        screen.classList.add('active');
        gameState.currentScreen = screenName;
    }
}

function loadStory(index) {
    if (!Array.isArray(gameData.story)) return;
    if (index < 0 || index >= gameData.story.length) return;

    const storyStep = gameData.story[index];
    gameState.storyIndex = index;
    gameState.activePuzzle = storyStep.puzzle || null;

    updateStoryUI(storyStep);
    updateProgress();

    if (storyStep.puzzle) {
        setTimeout(() => startPuzzle(storyStep.puzzle), 300);
    }
}

function updateStoryUI(storyStep) {
    const character = gameData.characters[storyStep.character] || { name: '–°–ò–°–¢–ï–ú–ê', emoji: '‚ö°' };
    document.getElementById('character-name').textContent = character.name;
    document.getElementById('dialog-text').textContent = storyStep.text || '';
    const emojiSpan = document.querySelector('#character-image .character-emoji');
    if (emojiSpan) emojiSpan.textContent = character.emoji;

    const choicesContainer = document.getElementById('choices-container');
    choicesContainer.innerHTML = '';

    if (storyStep.choices && storyStep.choices.length > 0) {
        storyStep.choices.forEach(choice => {
            const button = document.createElement('button');
            button.className = 'choice-btn';
            button.textContent = choice.text;

            const isPuzzleCompleted = choice.puzzle ? gameState.completedPuzzles.includes(choice.puzzle) : false;
            if (isPuzzleCompleted) {
                button.disabled = true;
                button.style.opacity = '0.5';
                button.textContent += ' ‚úì';
            } else {
                button.addEventListener('click', () => handleChoice(choice));
            }

            choicesContainer.appendChild(button);
        });
    } else {
        const button = document.createElement('button');
        button.className = 'choice-btn';
        button.textContent = '–î–∞–ª–µ–µ ‚Üí';
        button.addEventListener('click', () => {
            const nextIndex = gameState.storyIndex + 1;
            if (nextIndex < gameData.story.length) loadStory(nextIndex);
            else checkForVictory();
        });
        choicesContainer.appendChild(button);
    }
}

function handleChoice(choice) {
    if (choice.puzzle) {
        startPuzzle(choice.puzzle);
    } else if (choice.next !== undefined) {
        loadStory(choice.next);
    } else {
        const nextIndex = gameState.storyIndex + 1;
        if (nextIndex < gameData.story.length) loadStory(nextIndex);
        else checkForVictory();
    }
}

function startPuzzle(puzzleType) {
    const puzzle = gameData.puzzles[puzzleType];
    if (!puzzle) return;
    gameState.activePuzzle = puzzleType;

    document.getElementById('puzzle-title').textContent = puzzle.title;
    document.getElementById('puzzle-description').textContent = puzzle.description;
    const puzzleBody = document.getElementById('puzzle-body');
    puzzleBody.innerHTML = puzzle.content;

    if (puzzle.init) puzzle.init(puzzleBody);
    showScreen('puzzle');
}

function checkPuzzle() {
    const puzzleType = gameState.activePuzzle;
    if (!puzzleType) return;
    const puzzle = gameData.puzzles[puzzleType];
    if (!puzzle || !puzzle.check) return;

    const result = puzzle.check();
    if (result) {
        if (!gameState.completedPuzzles.includes(puzzleType)) {
            gameState.completedPuzzles.push(puzzleType);
        }
        updateProgress();
        setTimeout(() => {
            showScreen('game');
            const idx = gameData.story.findIndex(s => s.puzzle === puzzleType);
            if (idx !== -1 && idx + 1 < gameData.story.length) loadStory(idx + 1);
            else checkForVictory();
            gameState.activePuzzle = null;
            alert('–£—Å–ø–µ—Ö! –ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ —Ä–µ—à–µ–Ω–∞!');
        }, 200);
    } else {
        alert('–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!');
    }
}

function updateProgress() {
    const totalPuzzles = Object.keys(gameData.puzzles || {}).length;
    const completed = gameState.completedPuzzles.length;
    const percent = totalPuzzles > 0 ? Math.round((completed / totalPuzzles) * 100) : 0;

    document.getElementById('progress-fill').style.width = percent + '%';
    document.getElementById('progress-percent').textContent = percent;

    // –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø–æ–±–µ–¥—ã
    document.getElementById('puzzles-completed').textContent = `${completed}/${totalPuzzles}`;
}

function checkForVictory() {
    const totalPuzzles = Object.keys(gameData.puzzles || {}).length;
    const completed = gameState.completedPuzzles.length;
    console.log("–ü–†–û–í–ï–†–ö–ê –ü–û–ë–ï–î–´:", { completed, total: totalPuzzles, storyIndex: gameState.storyIndex });

    if (totalPuzzles === 0) return;
    if (completed >= totalPuzzles) showVictory();
    else showScreen('game');
}

function showVictory() {
    const timeSpent = (gameState.startTime ? Date.now() - gameState.startTime : 0);
    const minutes = Math.floor(timeSpent / 60000);
    const seconds = Math.floor((timeSpent % 60000) / 1000);

    document.getElementById('completion-time').textContent =
        `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

    updateProgress(); // —á—Ç–æ–±—ã puzzles-completed –±—ã–ª–æ —Ç–æ—á–Ω—ã–º

    showScreen('victory');
}

// -------------------
// –†–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
// -------------------
function restartGame() {
    console.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã...");

    // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    gameState.storyIndex = 0;
    gameState.completedPuzzles = [];
    gameState.activePuzzle = null;
    gameState.startTime = Date.now();

    // —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    document.getElementById('progress-fill').style.width = '0%';
    document.getElementById('progress-percent').textContent = '0';
    document.getElementById('puzzles-completed').textContent = `0/${Object.keys(gameData.puzzles).length}`;
    document.getElementById('completion-time').textContent = '00:00';

    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
    showScreen('loading');

    // —Å–±—Ä–æ—Å –ø–æ–ª–æ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    const progressBar = document.querySelector('.loading-progress');
    if (progressBar) progressBar.style.width = '0%';

    simulateLoading();
}

// -------------------
// –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
// -------------------
const gameData = {
    characters: {
        system: { name: '–°–ò–°–¢–ï–ú–ê', emoji: '‚ö°' },
        mentor: { name: '–ù–ê–°–¢–ê–í–ù–ò–ö', emoji: 'üë®‚Äçüíº' },
        design: { name: '–ê–°–ü–ï–ö–¢ –î–ò–ó–ê–ô–ù–ê', emoji: 'üé®' },
        music: { name: '–ê–°–ü–ï–ö–¢ –ú–£–ó–´–ö–ò', emoji: 'üéµ' },
        show: { name: '–ê–°–ü–ï–ö–¢ –®–û–£', emoji: 'üé≠' }
    },
    story: [
        { 
            character: 'system', 
            text: '‚ö†Ô∏è –¢–†–ï–í–û–ì–ê! –¢–≤–æ—Ä—á–µ—Å–∫–æ–µ —è–¥—Ä–æ –∞—Ç–∞–∫–æ–≤–∞–Ω–æ.', 
            choices: [{ text: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", next: 1 }] 
        },
        { 
            character: 'mentor', 
            text: '–°—Ç–∞–∂–µ—Ä, —Ç—ã –Ω–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ü—Ä–æ—Å—Ç–æ—Ä!', 
            choices: [{ text: "–Ø –≥–æ—Ç–æ–≤!", next: 2 }] 
        },
        { 
            character: 'mentor', 
            text: '–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?', 
            choices: [
                { text: '–î–∏–∑–∞–π–Ω üé®', puzzle: 'design' },
                { text: '–ú—É–∑—ã–∫–∞ üéµ', puzzle: 'music' },
                { text: '–®–æ—É üé≠', puzzle: 'show' }
            ] 
        },

        { character: 'design', text: '–Ø, –ê—Å–ø–µ–∫—Ç –î–∏–∑–∞–π–Ω–∞, –∂–¥—É —Ç–≤–æ–µ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è!', puzzle: 'design', choices: [] },
        { character: 'design', text: '–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –Ø —Å–Ω–æ–≤–∞ —Å –≤–∞–º–∏!', choices: [{ text: "–î–∞–ª—å—à–µ", next: 5 }] },

        { character: 'mentor', text: '–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Å–ø–µ–∫—Ç:', choices: [
            { text: '–ú—É–∑—ã–∫–∞ üéµ', puzzle: 'music' },
            { text: '–®–æ—É üé≠', puzzle: 'show' }
        ]},
        { character: 'music', text: '–Ø, –ê—Å–ø–µ–∫—Ç –ú—É–∑—ã–∫–∏, –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø—ã—Ç–∞–Ω–∏—é!', puzzle: 'music', choices: [] },
        { character: 'music', text: '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –Ø –≤ —Å—Ç—Ä–æ—é!', choices: [{ text: "–î–∞–ª—å—à–µ", next: 8 }] },

        { character: 'mentor', text: '–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Å–ø–µ–∫—Ç ‚Äî –®–æ—É!', choices: [{ text: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –®–æ—É üé≠', puzzle: 'show' }] },
        { character: 'show', text: '–Ø, –ê—Å–ø–µ–∫—Ç –®–æ—É, –∂–¥—É –∏—Å–ø—ã—Ç–∞–Ω–∏—è!', puzzle: 'show', choices: [] },
        { character: 'show', text: '–ë—Ä–∞–≤–æ! –Ø —Å–Ω–æ–≤–∞ —Å –≤–∞–º–∏!', choices: [{ text: "–§–∏–Ω–∞–ª", next: 11 }] },

        { character: 'mentor', text: 'üéâ –¢—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞! –ü—Ä–æ—Å—Ç–æ—Ä —Å–ø–∞—Å—ë–Ω!', choices: [] }
    ],
    puzzles: {
        design: {
            title: '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –î–∏–∑–∞–π–Ω–∞',
            description: '–†–∞—Å—Å—Ç–∞–≤—å —Ü–≤–µ—Ç–∞ –≤ –ø–æ—Ä—è–¥–∫–µ —Ä–∞–¥—É–≥–∏',
            content: `<div id="color-puzzle">
                <div draggable="true" data-color="red">üî¥ –ö—Ä–∞—Å–Ω—ã–π</div>
                <div draggable="true" data-color="orange">üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π</div>
                <div draggable="true" data-color="yellow">üü° –ñ–µ–ª—Ç—ã–π</div>
                <div draggable="true" data-color="green">üü¢ –ó–µ–ª–µ–Ω—ã–π</div>
                <div draggable="true" data-color="blue">üîµ –°–∏–Ω–∏–π</div>
            </div>`,
            init: function(body) {
                const cont = body.querySelector('#color-puzzle');
                let dragged = null;
                cont.querySelectorAll('[draggable="true"]').forEach(item => {
                    item.addEventListener('dragstart', () => { dragged = item; });
                    item.addEventListener('drop', e => {
                        e.preventDefault();
                        if (dragged && dragged !== item) cont.insertBefore(dragged, item);
                    });
                    item.addEventListener('dragover', e => e.preventDefault());
                });
            },
            check: function() {
                const colors = Array.from(document.querySelectorAll('#color-puzzle [data-color]'))
                    .map(el => el.dataset.color);
                return JSON.stringify(colors) === JSON.stringify(['red','orange','yellow','green','blue']);
            }
        },
        music: {
            title: '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –ú—É–∑—ã–∫–∏',
            description: '–ü–æ–≤—Ç–æ—Ä–∏ –º–µ–ª–æ–¥–∏—é',
            content: `<div id="music-buttons">
                <button class="music-btn" data-note="1">üéµ1</button>
                <button class="music-btn" data-note="2">üéµ2</button>
                <button class="music-btn" data-note="3">üéµ3</button>
            </div>`,
            init: function(body) {
                let seq = [];
                const correct = ['1','2','3'];
                body.querySelectorAll('.music-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        seq.push(btn.dataset.note);
                        if (seq.length === correct.length) {
                            if (JSON.stringify(seq) === JSON.stringify(correct)) checkPuzzle();
                            else { alert('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!'); seq=[]; }
                        }
                    });
                });
            },
            check: () => true
        },
        show: {
            title: '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –®–æ—É',
            description: '–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π',
            content: `<div id="scenario-list">
                <button class="scenario-btn" data-correct="false">–ì–µ—Ä–æ–π —Å–¥–∞–µ—Ç—Å—è</button>
                <button class="scenario-btn" data-correct="true">–ì–µ—Ä–æ–π –ø–æ–±–µ–∂–¥–∞–µ—Ç</button>
                <button class="scenario-btn" data-correct="false">–ì–µ—Ä–æ–π –ª–æ–º–∞–µ—Ç –≤—Å—ë</button>
            </div>`,
            init: function(body) {
                body.querySelectorAll('.scenario-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        if (btn.dataset.correct === "true") checkPuzzle();
                        else alert('–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
                    });
                });
            },
            check: () => true
        }
    }
};

// -------------------
// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π HUD
// -------------------
const debugDiv = document.createElement("div");
debugDiv.style.position = "fixed";
debugDiv.style.bottom = "0";
debugDiv.style.left = "0";
debugDiv.style.right = "0";
debugDiv.style.background = "rgba(0,0,0,0.7)";
debugDiv.style.color = "lime";
debugDiv.style.fontSize = "12px";
debugDiv.style.fontFamily = "monospace";
debugDiv.style.padding = "4px 8px";
debugDiv.style.zIndex = "9999";
document.body.appendChild(debugDiv);

function updateDebugHUD() {
    debugDiv.textContent =
        `storyIndex=${gameState.storyIndex} | ` +
        `activePuzzle=${gameState.activePuzzle || "‚Äî"} | ` +
        `completed=${gameState.completedPuzzles.length}/${Object.keys(gameData.puzzles).length}`;
}

const _origLoadStory = loadStory;
loadStory = function(index) {
    console.log("–ó–ê–ì–†–£–ó–ö–ê –°–Æ–ñ–ï–¢–ê:", index, gameData.story[index]);
    _origLoadStory(index);
    updateDebugHUD();
};

const _origCheckForVictory = checkForVictory;
checkForVictory = function() {
    console.log("–ü–†–û–í–ï–†–ö–ê –ü–û–ë–ï–î–´:", {
        completed: gameState.completedPuzzles.length,
        total: Object.keys(gameData.puzzles).length,
        storyIndex: gameState.storyIndex
    });
    _origCheckForVictory();
    updateDebugHUD();
};

document.addEventListener("DOMContentLoaded", () => {
    console.log('–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É...');
    initGame();
    updateDebugHUD();
});
