// app.js ‚Äî –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—é–∂–µ—Ç–æ–º –¥–ª—è VK Mini Apps

// -------------------
// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –∏–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–µ–∂–Ω–∏–º–∏)
// -------------------
let gameState = {
    currentScreen: 'loading',
    storyIndex: 0,
    completedPuzzles: [],
    startTime: null,
    playerName: '–°—Ç–∞–∂–µ—Ä',
    soundEnabled: false,
    platform: 'web',
    isVKApp: false,
    activePuzzle: null,
    hintsUsed: {}
};

// -------------------
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (VK Bridge + –∑–∞–≥—Ä—É–∑–∫–∞)
// -------------------
async function initGame() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
    try {
        if (typeof vkBridge !== 'undefined' && vkBridge) {
            try {
                await vkBridge.send('VKWebAppInit');
                gameState.isVKApp = true;
                // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
                const user = await vkBridge.send('VKWebAppGetUserInfo');
                if (user && user.first_name) gameState.playerName = user.first_name;
                console.log('VK Bridge –≥–æ—Ç–æ–≤, –∏–≥—Ä–æ–∫:', gameState.playerName);
            } catch (e) {
                console.warn('VK Bridge –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω:', e);
            }
        }
    } catch (err) {
        console.warn('vkBridge –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ.', err);
    }

    detectPlatform();
    simulateLoading();
}

// -------------------
// –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞
// -------------------
function detectPlatform() {
    const badge = document.getElementById('platform-badge');
    if (gameState.isVKApp) {
        gameState.platform = 'vk_app';
        if (badge) badge.textContent = 'VK Mini App ‚Äî ' + (gameState.playerName || '–∏–≥—Ä–æ–∫');
        document.body.classList.add('vk-app');
    } else {
        gameState.platform = 'web';
        if (badge) badge.textContent = '–ë—Ä–∞—É–∑–µ—Ä';
    }
}

function simulateLoading() {
    const progressBar = document.querySelector('.loading-progress');
    let progress = 0;
    const id = setInterval(() => {
        progress += Math.floor(Math.random()*8)+2;
        if (progressBar) progressBar.style.width = Math.min(progress,100)+'%';
        if (progress >= 100) {
            clearInterval(id);
            setTimeout(()=>{
                gameState.startTime = Date.now();
                showScreen('game');
                loadStory(0);
            }, 480);
        }
    }, 60);
}

// -------------------
// –≠–∫—Ä–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// -------------------
function showScreen(screenName) {
    document.querySelectorAll('.screen').forEach(s=>s.classList.remove('active'));
    const screen = document.getElementById('screen-'+screenName);
    if (screen) screen.classList.add('active');
    gameState.currentScreen = screenName;
}

function toggleMenu(){ document.getElementById('side-menu').classList.toggle('active'); playClick(); }
function toggleSound(){ gameState.soundEnabled = !gameState.soundEnabled; document.getElementById('sound-icon').textContent = gameState.soundEnabled ? 'üîä' : 'üîà'; playClick(); updateSoundUI(); }
function updateSoundUI(){ const bg = document.getElementById('background-music'); if(!bg) return; if(gameState.soundEnabled) { bg.play().catch(()=>{}); } else { bg.pause(); } }
function backToGame(){ playClick(); showScreen('game'); }
function playClick(){ if(gameState.soundEnabled) document.getElementById('click-sound').play().catch(()=>{}); }
function playSuccess(){ if(gameState.soundEnabled) document.getElementById('success-sound').play().catch(()=>{}); }

// -------------------
// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—é–∂–µ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
// -------------------
function loadStory(index){
    if(!Array.isArray(gameData.story)) return;
    if(index<0 || index>=gameData.story.length) return;
    const step = gameData.story[index];
    gameState.storyIndex = index;
    gameState.activePuzzle = step.puzzle || null;
    updateStoryUI(step);
    updateProgress();
    // –ï—Å–ª–∏ —à–∞–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞–∑–ª ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    if(step.puzzle) setTimeout(()=> startPuzzle(step.puzzle), 350);
}

function updateStoryUI(step){
    const character = gameData.characters[step.character] || {name:'–°–ò–°–¢–ï–ú–ê', emoji:'‚ö°'};
    document.getElementById('character-name').textContent = character.name;
    document.getElementById('dialog-text').textContent = step.text || '';
    const emojiSpan = document.querySelector('#character-image .character-emoji');
    if(emojiSpan) emojiSpan.textContent = character.emoji;

    const choicesContainer = document.getElementById('choices-container');
    choicesContainer.innerHTML = '';
    if(step.choices && step.choices.length){
        step.choices.forEach(choice=>{
            const btn = document.createElement('button');
            btn.className = 'choice-btn';
            btn.textContent = choice.text;
            const isDone = choice.puzzle ? gameState.completedPuzzles.includes(choice.puzzle) : false;
            if(isDone){ btn.disabled=true; btn.style.opacity='0.6'; btn.textContent += ' ‚úì'; }
            else{
                btn.addEventListener('click', ()=> handleChoice(choice));
            }
            choicesContainer.appendChild(btn);
        });
    } else {
        const btn = document.createElement('button');
        btn.className = 'choice-btn';
        btn.textContent = '–î–∞–ª–µ–µ ‚Üí';
        btn.addEventListener('click', ()=>{
            const nextIndex = gameState.storyIndex+1;
            if(nextIndex < gameData.story.length) loadStory(nextIndex);
            else checkForVictory();
        });
        choicesContainer.appendChild(btn);
    }
}

// -------------------
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
// -------------------
function handleChoice(choice){
    playClick();
    if(choice.puzzle) startPuzzle(choice.puzzle);
    else if(choice.next !== undefined) loadStory(choice.next);
    else {
        const nextIndex = gameState.storyIndex+1;
        if(nextIndex < gameData.story.length) loadStory(nextIndex);
        else checkForVictory();
    }
}

// -------------------
// –ü–∞–∑–ª—ã: –∑–∞–ø—É—Å–∫, –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥—Å–∫–∞–∑–∫–∏
// -------------------
function startPuzzle(puzzleType){
    const puzzle = gameData.puzzles[puzzleType];
    if(!puzzle) return;
    gameState.activePuzzle = puzzleType;
    document.getElementById('puzzle-title').textContent = puzzle.title;
    document.getElementById('puzzle-description').textContent = puzzle.description;
    const body = document.getElementById('puzzle-body');
    body.innerHTML = puzzle.content;
    // —Å–±—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –ø–∞–∑–ª–∞
    if(!gameState.hintsUsed[puzzleType]) gameState.hintsUsed[puzzleType] = 0;
    if(puzzle.init) puzzle.init(body);
    showScreen('puzzle');
}

function checkPuzzle(){
    const puzzleType = gameState.activePuzzle;
    if(!puzzleType) return;
    const puzzle = gameData.puzzles[puzzleType];
    if(!puzzle || !puzzle.check) return;
    const ok = puzzle.check();
    if(ok){
        if(!gameState.completedPuzzles.includes(puzzleType)) gameState.completedPuzzles.push(puzzleType);
        updateProgress();
        playSuccess();
        setTimeout(()=>{
            showScreen('game');
            // –∏—â–µ–º —à–∞–≥ —Å —ç—Ç–∏–º –ø–∞–∑–ª–æ–º —á—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –ø–æ —Å—é–∂–µ—Ç—É
            const idx = gameData.story.findIndex(s=>s.puzzle===puzzleType);
            if(idx!==-1 && idx+1 < gameData.story.length) loadStory(idx+1);
            else checkForVictory();
            gameState.activePuzzle = null;
            alert('–£—Å–ø–µ—Ö! –ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ —Ä–µ—à–µ–Ω–∞!');
        },200);
    } else {
        alert('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.');
    }
}

function showHint(){
    const p = gameState.activePuzzle;
    if(!p) { alert('–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π –∏—Å–ø—ã—Ç–∞–Ω–∏–µ.'); return; }
    const puzzle = gameData.puzzles[p];
    if(!puzzle || !puzzle.hint) { alert('–ü–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ—Ç.'); return; }
    gameState.hintsUsed[p] = (gameState.hintsUsed[p] || 0) + 1;
    const hintText = puzzle.hint(gameState.hintsUsed[p]);
    alert('–ü–æ–¥—Å–∫–∞–∑–∫–∞: ' + hintText);
}

// -------------------
// –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–æ–±–µ–¥–∞
// -------------------
function updateProgress(){
    const total = Object.keys(gameData.puzzles).length;
    const completed = gameState.completedPuzzles.length;
    const percent = total>0 ? Math.round((completed/total)*100) : 0;
    document.getElementById('progress-fill').style.width = percent+'%';
    document.getElementById('progress-percent').textContent = percent;
    document.getElementById('puzzles-completed').textContent = `${completed}/${total}`;
}

function checkForVictory(){
    const total = Object.keys(gameData.puzzles).length;
    const completed = gameState.completedPuzzles.length;
    if(total === 0) return;
    if(completed >= total) showVictory();
    else showScreen('game');
}

function showVictory(){
    const spent = gameState.startTime ? Date.now() - gameState.startTime : 0;
    const minutes = Math.floor(spent/60000), seconds = Math.floor((spent%60000)/1000);
    document.getElementById('completion-time').textContent = `${String(minutes).padStart(2,'0')}:${String(seconds).padStart(2,'0')}`;
    updateProgress();
    showScreen('victory');
}

// -------------------
// –†–µ—Å—Ç–∞—Ä—Ç –∏ –ø–æ–º–æ—â—å
// -------------------
function restartGame(){
    console.log('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...');
    gameState.storyIndex = 0; gameState.completedPuzzles = []; gameState.activePuzzle = null; gameState.startTime = Date.now(); gameState.hintsUsed = {};
    document.getElementById('progress-fill').style.width = '0%'; document.getElementById('progress-percent').textContent = '0';
    document.getElementById('puzzles-completed').textContent = `0/${Object.keys(gameData.puzzles).length}`;
    document.getElementById('completion-time').textContent = '00:00';
    showScreen('loading');
    simulateLoading();
}

function showHelp(){
    alert('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∫–≤–µ—Å—Ç-–≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ –¥–ª—è VK Mini Apps. –¢–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–∏ –∞—Å–ø–µ–∫—Ç–∞ –ü—Ä–æ—Å—Ç–æ—Ä–∞: –î–∏–∑–∞–π–Ω, –ú—É–∑—ã–∫—É –∏ –®–æ—É. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî —É–¥–∞—á–∏!');
}

// -------------------
// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è (VK) ‚Äî –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ ‚Äî –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ–µ –æ–∫–Ω–æ
// -------------------
async function shareResult(){
    const text = `${gameState.playerName} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –ü—Ä–æ—Å—Ç–æ—Ä –≤ –∏–≥—Ä–µ "–ö–æ–¥ –ï–¥–∏–Ω—Å—Ç–≤–∞"!`;
    if(gameState.isVKApp && typeof vkBridge !== 'undefined') {
        try {
            await vkBridge.send('VKWebAppShare', {link: 'https://vk.com/app_link_placeholder', text });
        } catch(e){ alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ VK: '+e); }
    } else {
        prompt('–°–∫–æ–ø–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –ø–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏:', text);
    }
}

// -------------------
// –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã: –ø–µ—Ä—Å–æ–Ω–∞–∂–∏, —Å—é–∂–µ—Ç –∏ –ø–∞–∑–ª—ã (–ª–æ–≥–∏–∫–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ —É–ª—É—á—à–µ–Ω—ã –∑–∞–≥–∞–¥–∫–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏)
// -------------------
const gameData = {
    characters: {
        system: { name: '–°–ò–°–¢–ï–ú–ê', emoji: '‚ö°' },
        mentor: { name: '–ù–ê–°–¢–ê–í–ù–ò–ö', emoji: 'üß≠' },
        design: { name: '–ê–°–ü–ï–ö–¢ –î–ò–ó–ê–ô–ù–ê', emoji: 'üé®' },
        music: { name: '–ê–°–ü–ï–ö–¢ –ú–£–ó–´–ö–ò', emoji: 'üéµ' },
        show: { name: '–ê–°–ü–ï–ö–¢ –®–û–£', emoji: 'üé≠' }
    },
    story: [
        { character:'system', text:'‚ö†Ô∏è –¢—Ä–µ–≤–æ–≥–∞: –ü—Ä–æ—Å—Ç–æ—Ä —Ç–µ—Ä—è–µ—Ç –∫—Ä–∞—Å–∫–∏, –Ω–æ—Ç—ã –∏ —Å–≤–µ—Ç. –°—Ç–∞–∂–µ—Ä ‚Äî —Ç—ã –Ω–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å!', choices:[{text:'–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤', next:1}] },
        { character:'mentor', text:'–Ø ‚Äî –ù–∞—Å—Ç–∞–≤–Ω–∏–∫. –¢—Ä–∏ –∞—Å–ø–µ–∫—Ç–∞ –±—ã–ª–∏ —Ä–∞–∑–æ—Ä–µ–Ω—ã. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ –∏—Ö, –∏ –ü—Ä–æ—Å—Ç–æ—Ä –≤–Ω–æ–≤—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—Å—è.', choices:[{text:'–°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É', next:2}] },
        { character:'mentor', text:'–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º? –í—ã–±–µ—Ä–∏ –∞—Å–ø–µ–∫—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ.', choices:[
            {text:'–î–∏–∑–∞–π–Ω üé®', puzzle:'design'},
            {text:'–ú—É–∑—ã–∫–∞ üéµ', puzzle:'music'},
            {text:'–®–æ—É üé≠', puzzle:'show'}
        ]},
        // –ö–∞–∂–¥—ã–π –∞—Å–ø–µ–∫—Ç –∏–º–µ–µ—Ç –¥–≤–∞ —à–∞–≥–∞: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ (–∑–∞–ø—É—Å–∫ –ø–∞–∑–ª–∞) –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        { character:'design', text:'–Ø ‚Äî –î–∏–∑–∞–π–Ω. –ú–æ–∏ —Ü–≤–µ—Ç–∞ –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏—Å—å. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ —Ä–∞–¥—É–≥—É.', puzzle:'design', choices:[] },
        { character:'design', text:'–¶–≤–µ—Ç–∞ –≤–µ—Ä–Ω—É–ª–∏—Å—å ‚Äî –î–∏–∑–∞–π–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.', choices:[{text:'–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫—É', next:6}] },

        { character:'mentor', text:'–û—Ç–ª–∏—á–Ω–æ. –í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Å–ø–µ–∫—Ç.', choices:[
            {text:'–ú—É–∑—ã–∫–∞ üéµ', puzzle:'music'},
            {text:'–®–æ—É üé≠', puzzle:'show'}
        ]},
        { character:'music', text:'–Ø ‚Äî –ú—É–∑—ã–∫–∞. –ú–µ–ª–æ–¥–∏—è –ø–∞–º—è—Ç–∏ –∏—Å—á–µ–∑–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏ –µ—ë –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏.', puzzle:'music', choices:[] },
        { character:'music', text:'–ù–æ—Ç—ã —Å–Ω–æ–≤–∞ –∑–≤—É—á–∞—Ç ‚Äî –ú—É–∑—ã–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.', choices:[{text:'–î–∞–ª—å—à–µ', next:9}] },

        { character:'mentor', text:'–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Å–ø–µ–∫—Ç ‚Äî –®–æ—É. –û–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏.', choices:[{text:'–ö —Å—Ü–µ–Ω–∞—Ä–∏—é ‚Üí', puzzle:'show'}] },
        { character:'show', text:'–Ø ‚Äî –®–æ—É. –í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Äî –≤ –Ω—ë–º –∏—Å–∫—Ä–∞ –ü—Ä–æ—Å—Ç–æ—Ä–∞.', puzzle:'show', choices:[] },
        { character:'show', text:'–®–æ—É –≤–Ω–æ–≤—å —Å–∏—è–µ—Ç ‚Äî —Ç—ã –≤–µ—Ä–Ω—É–ª –µ–¥–∏–Ω—Å—Ç–≤–æ!', choices:[{text:'–§–∏–Ω–∞–ª', next:11}] },

        { character:'mentor', text:'üéâ –¢—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã. –ü—Ä–æ—Å—Ç–æ—Ä —Å–ø–∞—Å—ë–Ω. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!', choices:[] }
    ],
    puzzles: {
        design: {
            title:'–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –î–∏–∑–∞–π–Ω–∞',
            description:'–ü–µ—Ä–µ—Ç–∞—â–∏ –ø–æ–ª–æ—Å–∫–∏ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∏ —à–ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ —Ä–∞–¥—É–≥–∏ (–æ—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ –¥–æ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ).',
            content: `<div id="color-puzzle" class="color-puzzle" aria-label="–ü–∞–∑–ª —Ü–≤–µ—Ç–∞">
                <div class="cp-row" draggable="true" data-color="green">üü¢ –ó–µ–ª–µ–Ω—ã–π</div>
                <div class="cp-row" draggable="true" data-color="yellow">üü° –ñ–µ–ª—Ç—ã–π</div>
                <div class="cp-row" draggable="true" data-color="blue">üîµ –°–∏–Ω–∏–π</div>
                <div class="cp-row" draggable="true" data-color="red">üî¥ –ö—Ä–∞—Å–Ω—ã–π</div>
                <div class="cp-row" draggable="true" data-color="purple">üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π</div>
            </div>`,
            init: function(body){
                const cont = body.querySelector('#color-puzzle');
                let dragged = null;
                cont.querySelectorAll('.cp-row').forEach(item=>{
                    item.addEventListener('dragstart', e=>{ dragged = item; item.classList.add('dragging'); });
                    item.addEventListener('dragend', e=>{ dragged=null; item.classList.remove('dragging'); });
                    item.addEventListener('dragover', e=>{ e.preventDefault(); const after = getDragAfterElement(cont, e.clientY); if(after==null) cont.appendChild(dragged); else cont.insertBefore(dragged, after); });
                });
                // helper
                function getDragAfterElement(container,y){
                    const draggableElements = [...container.querySelectorAll('.cp-row:not(.dragging)')];
                    return draggableElements.reduce((closest, child)=>{
                        const box = child.getBoundingClientRect();
                        const offset = y - box.top - box.height/2;
                        if(offset < 0 && offset > closest.offset) return {offset, element: child};
                        return closest;
                    }, {offset: Number.NEGATIVE_INFINITY}).element || null;
                }
            },
            check: function(){
                const order = Array.from(document.querySelectorAll('#color-puzzle .cp-row')).map(el=>el.dataset.color);
                // –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: red, orange (we don't have orange so we use yellow), yellow, green, blue, purple ‚Äî adapted to available items
                const target = ['red','yellow','green','blue','purple'];
                return JSON.stringify(order) === JSON.stringify(target);
            },
            hint: function(count){
                if(count===1) return '–°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å üî¥ –ö—Ä–∞—Å–Ω—ã–π.';
                return '–ü–æ–¥—É–º–∞–π –æ –ø–æ—Ä—è–¥–∫–µ —Ü–≤–µ—Ç–æ–≤ —Ä–∞–¥—É–≥–∏: –∫—Ä–∞—Å–Ω—ã–π ‚Äî –∂—ë–ª—Ç—ã–π ‚Äî –∑–µ–ª—ë–Ω—ã–π ‚Äî —Å–∏–Ω–∏–π ‚Äî —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π.';
            }
        },
        music: {
            title:'–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –ú—É–∑—ã–∫–∏',
            description:'–ü–æ–≤—Ç–æ—Ä–∏ –º–µ–ª–æ–¥–∏—é ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ—Ç –∏–∑ 5 –∫–ª–∏–∫–æ–≤. –°–ª—É—à–∞–π –∞–∫–∫—É—Ä–∞—Ç–Ω–æ.',
            content: `<div id="music-puzzle" class="music-puzzle">
                <div id="melody-visual" class="melody-visual">üé∂</div>
                <div class="music-buttons">
                    <button class="music-btn" data-note="1">üéµ1</button>
                    <button class="music-btn" data-note="2">üéµ2</button>
                    <button class="music-btn" data-note="3">üéµ3</button>
                    <button class="music-btn" data-note="4">üéµ4</button>
                </div>
                <div style="font-size:0.9rem;margin-top:10px;color:rgba(255,255,255,0.75)">–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–µ–ª–æ–¥–∏—é.</div>
            </div>`,
            init: function(body){
                const buttons = body.querySelectorAll('.music-btn'); let input=[];
                // —Å–ª—É—á–∞–π–Ω–∞—è "–º–µ–ª–æ–¥–∏—è" ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å 5 –Ω–æ—Ç
                const correct = Array.from({length:5}, ()=>String(Math.floor(Math.random()*4)+1));
                // –≤–∏–∑—É–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ–ª–æ–¥–∏–∏
                let i=0;
                const vis = body.querySelector('#melody-visual');
                vis.textContent = '–°–ª—É—à–∞–π...';
                const showSeq = setInterval(()=>{
                    if(i>=correct.length){ clearInterval(showSeq); vis.textContent='–¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å'; return; }
                    vis.textContent = 'üé∂ ' + correct[i];
                    i++;
                }, 550);
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ data –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                body.dataset.correct = JSON.stringify(correct);
                // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
                buttons.forEach(b=> b.addEventListener('click', ()=>{
                    input.push(b.dataset.note);
                    // –∫—Ä–∞—Ç–∫–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
                    b.animate([{transform:'scale(1.05)'},{transform:'scale(1)'}],{duration:120});
                    if(input.length === correct.length){
                        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –º–µ—Å—Ç–µ –¥–ª—è check() ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º temporary storage
                        body.dataset.player = JSON.stringify(input);
                        // –¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–∂–∞—Ç—å "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" –∏–ª–∏ –º–æ–∂–Ω–æ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å ‚Äî —Ç—É—Ç –ø—É—Å—Ç—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä—É—á–Ω—É—é
                    }
                }));
            },
            check: function(){
                const body = document.getElementById('puzzle-body');
                const correct = JSON.parse(body.dataset.correct || '[]');
                const player = JSON.parse(body.dataset.player || '[]');
                if(!player || player.length !== correct.length) return false;
                return JSON.stringify(player) === JSON.stringify(correct);
            },
            hint: function(count){
                if(count===1) return '–ó–∞–ø–æ–º–Ω–∏ –ø–æ—Ä—è–¥–æ–∫ —Ü–∏—Ñ—Ä –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –∏—Ö —Ä–æ–≤–Ω–æ 5.';
                return '–ï—Å–ª–∏ —Å–±–∏–ª—Å—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: —Å–Ω–∞—á–∞–ª–∞ —Å–ª—É—à–∞–π, –ø–æ—Ç–æ–º –ø–æ–≤—Ç–æ—Ä—è–π.';
            }
        },
        show: {
            title:'–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –®–æ—É',
            description:'–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Äî —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—ë—Ç –ü—Ä–æ—Å—Ç–æ—Ä—É –∏—Å–∫—Ä—É.',
            content: `<div id="scenario-list" class="scenario-list">
                <button class="scenario-btn" data-correct="false">–ì–µ—Ä–æ–π –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç –º–µ—á—Ç—ã –∏ —É—Ö–æ–¥–∏—Ç.</button>
                <button class="scenario-btn" data-correct="true">–ì–µ—Ä–æ–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—é–¥–µ–π, –∏ —Å–≤–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.</button>
                <button class="scenario-btn" data-correct="false">–ì–µ—Ä–æ–π —Ä–∞–∑–æ—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω—É –∏ —Ä–∞–∑–≥–æ–Ω—è–µ—Ç —Ç–æ–ª–ø—É.</button>
            </div>`,
            init: function(body){
                body.querySelectorAll('.scenario-btn').forEach(btn=>{
                    btn.addEventListener('click', ()=>{
                        if(btn.dataset.correct === 'true'){
                            // –ø–æ–º–µ—á–∞–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî –º—ã –º–æ–∂–µ–º —Å—Ä–∞–∑—É –≤—ã–∑–≤–∞—Ç—å checkPuzzle()
                            body.dataset.choice = 'true';
                            // –Ω–µ–±–æ–ª—å—à–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∏ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞
                            btn.animate([{transform:'scale(1.05)'},{transform:'scale(1)'}],{duration:160});
                            setTimeout(()=> checkPuzzle(), 220);
                        } else {
                            btn.animate([{opacity:1},{opacity:0.6},{opacity:1}],{duration:200});
                            alert('–ù–µ—Ç ‚Äî —ç—Ç–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞—Ä—É—à–∞–µ—Ç –≥–∞—Ä–º–æ–Ω–∏—é. –ü–æ–¥—É–º–∞–π –µ—â—ë.');
                        }
                    });
                });
            },
            check: function(){ const body = document.getElementById('puzzle-body'); return body.dataset.choice === 'true'; },
            hint: function(count){ if(count===1) return '–ò—â–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π, –≥–¥–µ –≥–µ—Ä–æ–π –ù–ï —Ä–∞–∑—Ä—É—à–∞–µ—Ç –∏ –ù–ï —É—Ö–æ–¥–∏—Ç.'; return '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—é–¥–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–µ—Ç.'; }
        }
    }
};

// -------------------
// HUD –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –≤ production) ‚Äî –ª–µ–≥–∫–∏–π –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–ª–æ–π
// -------------------
const debugDiv = document.createElement('div');
debugDiv.style.position='fixed'; debugDiv.style.bottom='6px'; debugDiv.style.left='6px'; debugDiv.style.padding='6px 8px';
debugDiv.style.fontSize='11px'; debugDiv.style.color='rgba(255,255,255,0.8)'; debugDiv.style.fontFamily='monospace';
debugDiv.style.background='rgba(0,0,0,0.2)'; debugDiv.style.borderRadius='8px'; debugDiv.style.zIndex='9999';
document.body.appendChild(debugDiv);
function updateDebugHUD(){ debugDiv.textContent = `idx=${gameState.storyIndex} | active=${gameState.activePuzzle||'‚Äî'} | done=${gameState.completedPuzzles.length}/${Object.keys(gameData.puzzles).length}`; }
const _origLoadStory = loadStory;
loadStory = function(index){ _origLoadStory(index); updateDebugHUD(); console.log('LOAD STORY', index); };
const _origCheckForVictory = checkForVictory;
checkForVictory = function(){ _origCheckForVictory(); updateDebugHUD(); console.log('CHECK VICTORY'); };

// -------------------
// –°—Ç–∞—Ä—Ç
// -------------------
document.addEventListener('DOMContentLoaded', ()=>{ initGame(); updateDebugHUD(); });